{"version":3,"sources":["Main.js","Sidebar.js","App.js","index.js"],"names":["Main","activeNote","onUpdateNote","onEditField","key","value","Date","now","className","type","id","title","onChange","e","target","autoFocus","placeholder","body","Sidebar","notes","onAddNote","onDeleteNote","setActiveNote","sortedNotes","sort","a","b","lastModified","onClick","map","note","substr","toLocaleDateString","hour","minute","App","useState","localStorage","JSON","parse","setNotes","useEffect","setItem","stringify","newNote","uuid","idTodelete","filter","find","updatedNote","updatedNotesArr","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOA4CeA,MAzCf,YAA8C,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,aAEpBC,EAAc,SAACC,EAAKC,GAAW,IAAD,EAClCH,EAAa,2BACRD,GADO,uBAETG,EAAMC,GAFG,6BAGIC,KAAKC,OAHT,MAOd,OAAKN,EAIF,sBAAKO,UAAU,WAAf,UAEG,sBAAKA,UAAU,qBAAf,UACE,uBACAC,KAAK,OACLC,GAAG,QACHL,MAAOJ,EAAWU,MAClBC,SAAU,SAACC,GAAD,OAAOV,EAAY,QAASU,EAAEC,OAAOT,QAC/CU,WAAS,IAER,0BAAWL,GAAG,OACdM,YAAY,0BACZX,MAAOJ,EAAWgB,KAClBL,SAAU,SAACC,GAAD,OAAOV,EAAY,OAAQU,EAAEC,OAAOT,aAIjD,sBAAKG,UAAU,wBAAf,UAEE,oBAAIA,UAAU,gBAAd,SAA+BP,EAAWU,QAE1C,cAAC,IAAD,CAAgBH,UAAU,mBAA1B,SAA8CP,EAAWgB,aAzBzC,qBAAKT,UAAU,iBAAf,6BCiCXU,MA9Cf,YAAkF,IAA/DC,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,aAAcpB,EAA8B,EAA9BA,WAAYqB,EAAkB,EAAlBA,cAErDC,EAAcJ,EAAMK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,aAAeF,EAAEE,gBAG7D,OACG,sBAAKnB,UAAU,cAAf,UAEI,sBAAKA,UAAU,qBAAf,UACG,uCAEA,wBAAQoB,QAASR,EAAjB,oBAGJ,qBAAKZ,UAAU,oBAAf,SAEIe,EAAYM,KAAI,SAACC,GAAD,OAEjB,sBACGtB,UAAS,2BAAsBsB,EAAKpB,KAAKT,GAAc,UACvD2B,QAAS,kBAAMN,EAAcQ,EAAKpB,KAFrC,UAIG,sBAAKF,UAAU,qBAAf,UACI,iCAASsB,EAAKnB,QACd,wBAAQiB,QAAS,kBAAMP,EAAaS,EAAKpB,KAAzC,uBAIJ,4BAAIoB,EAAKb,MAAQa,EAAKb,KAAKc,OAAO,EAAE,KAAO,QAE3C,wBAAOvB,UAAU,YAAjB,2BACmB,IAAIF,KAAKwB,EAAKH,cAAcK,mBAAmB,KAAM,CAChEC,KAAK,UACLC,OAAO,2BC+BfC,MA1Df,WAAgB,IAAD,EACYC,mBACvBC,aAAalB,MAAQmB,KAAKC,MAAMF,aAAalB,OAAS,IAF3C,mBACPA,EADO,KACAqB,EADA,OAKuBJ,oBAAS,GALhC,mBAKNnC,EALM,KAKMqB,EALN,KA2Cb,OApCAmB,qBAAU,WACRJ,aAAaK,QAAQ,QAASJ,KAAKK,UAAUxB,MAC5C,CAACA,IAmCF,sBAAKX,UAAU,MAAf,UAEE,cAAC,EAAD,CACAW,MAAOA,EACPC,UArCc,WAChB,IAAMwB,EAAU,CACdlC,GAAImC,MACJlC,MAAO,gBACPM,KAAM,GACNU,aAAcrB,KAAKC,OAGrBiC,EAAS,CAACI,GAAF,mBAAczB,KACtBG,EAAcsB,EAAQlC,KA6BpBW,aAdkB,SAACyB,GACnBN,EAASrB,EAAM4B,QAAO,SAACjB,GAAD,OAAUA,EAAKpB,KAAOoC,OAc5C7C,WAAYA,EACZqB,cAAeA,IAEf,cAAC,EAAD,CAAMrB,WAbDkB,EAAM6B,MAAK,SAAClB,GAAD,OAAUA,EAAKpB,KAAOT,KAaHC,aA9BlB,SAAC+C,GACpB,IAAMC,EAAkB/B,EAAMU,KAAI,SAACC,GACjC,OAAIA,EAAKpB,KAAOuC,EAAYvC,GACnBuC,EAGFnB,KAGTU,EAASU,UCjCbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.6b88a3aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nfunction Main({ activeNote, onUpdateNote  }) {\r\n\r\n  const onEditField = (key, value) => {\r\n    onUpdateNote({\r\n      ...activeNote,\r\n      [key]: value,\r\n      lastModified: Date.now(),\r\n    });\r\n  };\r\n\r\n  if (!activeNote) return <div className=\"no-active-note\">No Active Note</div>;\r\n   return (\r\n\r\n    \r\n     <div className=\"app-main\">\r\n\r\n        <div className=\"app-main-note-edit\">\r\n          <input \r\n          type=\"text\"\r\n          id=\"title\"\r\n          value={activeNote.title}\r\n          onChange={(e) => onEditField(\"title\", e.target.value)}\r\n          autoFocus/>\r\n\r\n           <textarea  id=\"body\" \r\n           placeholder=\"take your notes here...\"\r\n           value={activeNote.body}\r\n           onChange={(e) => onEditField(\"body\", e.target.value)} />\r\n\r\n        </div>\r\n\r\n        <div className=\"app-main-note-preview\">\r\n            \r\n          <h1 className=\"preview-title\">{activeNote.title}</h1>\r\n         \r\n          <ReactMarkdown  className=\"markdown-preview\">{activeNote.body}</ReactMarkdown >\r\n       </div>\r\n   </div>\r\n   );\r\n}\r\n\r\nexport default Main;","function Sidebar({ notes, onAddNote, onDeleteNote, activeNote, setActiveNote, }) {\r\n\r\n    const sortedNotes = notes.sort((a, b) => b.lastModified - a.lastModified);\r\n\r\n\r\n   return (\r\n      <div className=\"app-sidebar\">\r\n\r\n          <div className=\"app-sidebar-header\">\r\n             <h1>Notes</h1>\r\n \r\n             <button onClick={onAddNote}>Add</button>\r\n         </div>\r\n\r\n         <div className=\"app-sidebar-notes\">\r\n\r\n            {sortedNotes.map((note) => (\r\n\r\n            <div \r\n               className={`app-sidebar-note ${note.id===activeNote && \"active\"}`} \r\n               onClick={() => setActiveNote(note.id)}>\r\n\r\n               <div className=\"sidebar-note-title\">\r\n                   <strong>{note.title}</strong>\r\n                   <button onClick={() => onDeleteNote(note.id)}>Delete</button>\r\n\r\n               </div>\r\n\r\n               <p>{note.body && note.body.substr(0,100) + \"...\"}</p>\r\n\r\n               <small className=\"note-meta\">\r\n                   Last modified {new Date(note.lastModified).toLocaleDateString(\"RU\", {\r\n                       hour:'2-digit',\r\n                       minute:'2-digit',\r\n                   })}\r\n               </small>\r\n             </div>\r\n            ))}\r\n\r\n\r\n\r\n         </div>\r\n      </div> \r\n  );\r\n}\r\n\r\nexport default Sidebar;","import { useEffect, useState } from 'react';\nimport uuid from \"react-uuid\";\nimport './App.css';\nimport Main from './Main';\nimport Sidebar from './Sidebar';\n\nfunction App() {\n  const[notes, setNotes] = useState(\n    localStorage.notes ? JSON.parse(localStorage.notes) : []\n  );\n  \n  const [activeNote, setActiveNote] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n      title: \"Untitled Note\",\n      body: \"\",\n      lastModified: Date.now(),\n    };\n\n    setNotes([newNote, ...notes]);\n    setActiveNote(newNote.id);\n  };\n\n  const onUpdateNote = (updatedNote) => {\n    const updatedNotesArr = notes.map((note) => {\n      if (note.id === updatedNote.id) {\n        return updatedNote;\n      }\n\n      return note;\n    });\n\n    setNotes(updatedNotesArr);\n  };\n\n   const onDeleteNote = (idTodelete) => {\n      setNotes(notes.filter((note) => note.id !== idTodelete))\n  };\n\n  const getActiveNote = () =>{\n    return notes.find((note) => note.id === activeNote);\n  }\n\n  return (\n    <div className=\"App\">\n\n      <Sidebar \n      notes={notes} \n      onAddNote={onAddNote} \n      onDeleteNote={onDeleteNote}\n      activeNote={activeNote}\n      setActiveNote={setActiveNote}/>\n\n      <Main activeNote={getActiveNote()} onUpdateNote={onUpdateNote} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}